<?php

namespace Fastravel\Hotel;

use Fastravel\Libraries\APIController;
use Fastravel\Libraries\Message\HotelMessage;
use Fastravel\Libraries\Parser\Hotel\PaymentResponseParser;
use Fastravel\Libraries\Utility;
use Fastravel\Libraries\MTI;
use Phalcon\Db;

class PaymentController extends APIController
{
    protected $invoking = "Payment Hotel";
    
    public function indexAction()
    {
        $this->setMTI(MTI::HOTELPAY);
        $this->setProductCode("RHOTEL");
        
        $message = new HotelMessage($this);
        
        $message->set(HotelMessage::FIELD_PAX_PASSPORT, "IDN");
        $message->set(HotelMessage::FIELD_DEST_COUNTRY, "IDN");
        
        $message->set(HotelMessage::FIELD_CMD, "BookHotel");
        $message->set(HotelMessage::FIELD_RESNO_FINISHBOOK, "y");
        $message->set(HotelMessage::FIELD_HOTEL_ID, $this->request->hotelDetail->hotelId);
        $message->set(HotelMessage::FIELD_BOOKING_CONTACT_NOHP, $this->request->contact->phone);
        $message->set(HotelMessage::FIELD_BOOKING_CONTACT_FIRST_NAME, $this->request->contact->firstName);
        $message->set(HotelMessage::FIELD_BOOKING_CONTACT_LAST_NAME, $this->request->contact->lastName);
        $message->set(HotelMessage::FIELD_BOOKING_CONTACT_EMAIL, $this->request->contact->email);
        $message->set(HotelMessage::FIELD_BOOKING_CONTACT_CITY, $this->request->contact->city);
        
        $message->set(HotelMessage::FIELD_NOMINAL, $this->request->hotelDetail->price);
        
        // ===== Start of HotelMessage::FIELD_HOTEL_DATA =====
        $hotelData = new \stdClass();
        $hotelData->Seq = 1;
        $hotelData->InternalCode = $this->request->hotelDetail->internalCode;
        $hotelData->FlagAvail = true;
        $hotelData->HotelId = $this->request->hotelDetail->hotelId;
        $hotelData->RequestDes = "";
        
        $hotelData->RoomCatg = array(); 
        
        $room = new \stdClass();
        $room->CatgId = $this->request->hotelDetail->categoryId;
        $room->CatgName = $this->request->hotelDetail->categoryName;
        $room->checkIn = $this->request->hotelDetail->checkInDate;
        $room->checkOut = $this->request->hotelDetail->checkOutDate;
        $room->BFType = $this->request->hotelDetail->bfType;
        $room->RoomType = array();
        
        $roomType = new \stdClass();
        $roomType->Seq = 1;
        $roomType->RQBedChild = "N";
        $roomType->AdultNum = $this->request->guest;
        $roomType->TypeName = $this->request->hotelDetail->typeName;
        $roomType->Price = $this->request->hotelDetail->price;
        $roomType->ChildAges = "";
        $roomType->PaxInformation = array();
        
        $paxInformation = new \stdClass();
        $paxInformation->Id = 1;
        $paxInformation->Content = $this->request->contact->firstName . " " . $this->request->contact->lastName . ", Tn.";
        $paxInformation->negara_pax = "id";
        $paxInformation->email_pax = $this->request->contact->email;
        $paxInformation->no_hp_pax = $this->request->contact->phone;
        
        $roomType->PaxInformation[] = $paxInformation;
        $room->RoomType[] = $roomType;
        $hotelData->RoomCatg[] = $room;
        // ===== End of HotelMessage::FIELD_HOTEL_DATA =====
        
        $message->set(HotelMessage::FIELD_HOTEL_DATA, json_encode([$hotelData]));
        
        $message->set(HotelMessage::FIELD_ROOM_COUNT, $this->request->room);
        $message->set(HotelMessage::FIELD_GUEST_COUNT, $this->request->guest);
        $message->set(HotelMessage::FIELD_PERIOD_CHECKIN, $this->request->hotelDetail->checkInDate);
        $message->set(HotelMessage::FIELD_PERIOD_CHECKOUT, $this->request->hotelDetail->checkOutDate);
        
        $message->set(HotelMessage::FIELD_HOTEL_BILLER, $this->request->billerId);
        $message->set(HotelMessage::FIELD_RESNO, $this->request->bookingCode);
        $message->set(HotelMessage::FIELD_PERIOD_ROOM_INFO, '[{"AdultNum":{"RoomType":"","RQBedChild":"N","content":"2"},"ChildAges":""}]');
        
        $this->request->simulateSuccess = $this->config->environment;
        
        error_log("request : " . $message->toString());
        
        $message->set(HotelMessage::FIELD_HOTEL_ID, self::checkHotelBiller($this, $message->get(HotelMessage::FIELD_HOTEL_ID), $message->get(HotelMessage::FIELD_HOTEL_BILLER)));
        
        
        
        if(!$this->request->simulateSuccess)
        {
            if(!Utility::isTesterOutlet($this->getOutletId()))
            {
                $this->sendToCore($message);
            } 
            
        }
        
        PaymentResponseParser::instance()->parse($message)->into($this);
    }
    
    public static function checkHotelBiller(APIController $apiController, $hotelBillerId, $idBiller){
        
        $IDBILLERKAHA = 124;
        $IDBILLER_MG_HOLIDAY = 120;
        //$IDBILLER_TIKETDOTCOM = 167;
        
        $tableName = "hotel_data_detail_3";
        if($idBiller===$IDBILLERKAHA){
            $tableName = "hotel_data_detail";
        } else if ($idBiller===$IDBILLER_MG_HOLIDAY){
            $tableName = "hotel_data_detail_2";
        }
        
        $hotelBillerIdData = $apiController->db->fetchOne("SELECT * FROM " . $tableName . " WHERE id_hotel_biller = ? ", Db::FETCH_OBJ, [$hotelBillerId] );
        
        if(!empty($hotelBillerIdData)){
            
            return intval($hotelBillerIdData->id_hotel);
            
        } else {
            
            return intval($hotelBillerId);
            
        }
        
    }
    
}
