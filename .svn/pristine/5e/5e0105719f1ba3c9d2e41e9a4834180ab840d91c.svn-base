<?php

namespace Fastravel\Libraries\Lists;

use Fastravel\Libraries\APIController;
use Fastravel\Libraries\Utility;
use Phalcon\Mvc\Controller;
use Phalcon\Db;

class ListKERETA extends Controller {

    protected $invoking = "List Kereta";
    
    public static function init($implodedata) 
    {
        $data = explode("#", $implodedata);
        return $data;
    }

    public static function initObject($data) 
    {
        return (object) array(
                    "additional" => array(
                        array("key" => "Kode Booking", "value" => $data->bill_info2),
                        array("key" => "Nama Kereta", "value" => $data->bill_info78),
                        array("key" => "Rute", "value" => $data->bill_info79 . "(". $data->bill_info11 .") - ".$data->bill_info81." (".$data->bill_info12.")"),
                        array("key" => "Tanggal Keberangkatan", "value" => Utility::getFullDate_time($data->bill_info13, $data->bill_info80) ),
                        array("key" => "Waktu Keberangkatan", "value" => substr($data->bill_info80,0,2).":".substr($data->bill_info80,2,2) ),
                        array("key" => "Waktu Kedatangan", "value" => substr($data->bill_info82,0,2).":".substr($data->bill_info82,2,2) )
                    ),
                    "url_etiket" => "http://api.fastravel.co.id/app/generate_etiket?id_transaksi=" . $data->id_transaksi,
                    "url_struk" => "http://api.fastravel.co.id/app/generate_struk?id_transaksi=" . $data->id_transaksi,
                    "url_image" => "http://static.scash.bz/jadipergi/img/wisata/FA53732/21112016_9313554dd92b6aff2bfe8e09ebc865ca.jpg"
        );

    }

    public function initBook(APIController $apiController) {

        $outlet_id = $apiController->getOutletId();
        $result = array();
        $expiredTime = Utility::getBookExpiredTime($apiController->request->product);  
        $query = $apiController->db->query("SELECT jenis_transaksi,* FROM transaksi
            WHERE id_transaksi IN (
                SELECT max(id_transaksi) FROM transaksi 
                WHERE id_outlet = ? AND id_produk = 'TKAI' AND response_code = '00' AND time_response + interval '".$expiredTime."' >= now()
                GROUP BY bill_info2
            ) ORDER BY time_request DESC", [$outlet_id]);

        $query->setFetchMode(Db::FETCH_OBJ);

        foreach ($query->fetchAll() as $value) 
        {
            if($value->jenis_transaksi == "0" && ($value->keterangan !== 'CANCEL BOOKING BERHASIL')){
                $result[] = (object) array(
                            "id_transaksi" => $value->id_transaksi,
                            "kode_booking" => $value->bill_info2,
                            "origin" => $value->bill_info79,
                            "destination" => $value->bill_info81,
                            "tanggal_keberangkatan" => $value->bill_info13,
                            "hari_keberangkatan" => $this->getDay($value->bill_info13),
                            "jam_keberangkatan" => $value->bill_info80,
                            "tanggal_kedatangan" => "",
                            "hari_kedatangan" => "",
                            "jam_kedatangan" => $value->bill_info82,
                            "kode_kereta" => $value->bill_info83,
                            "nama_kereta" => $value->bill_info78,                    
                            "classes" => $value->bill_info54,
                            "penumpang" => Utility::getPassengerKereta($value),
                            "komisi" =>  Utility::getKomisi($apiController,$value->id_transaksi),
                            "url_etiket" => "http://api.fastravel.co.id/app/generate_etiket?id_transaksi=" . $value->id_transaksi,
                            "url_struk" => "http://api.fastravel.co.id/app/generate_struk?id_transaksi=" . $value->id_transaksi,
                );
            }
        }

        return $result;
    }
    public function initPAYMENT(APIController $apiController) {

        $result = array();

        $query = $apiController->db->query("SELECT * FROM fmss.transaksi WHERE
                fmss.transaksi.jenis_transaksi = 1 AND fmss.transaksi.response_code='00' AND
                fmss.transaksi.id_produk like '%KAI%' AND fmss.transaksi.id_outlet = ? 
                ORDER BY time_request DESC LIMIT ? " , [$apiController->getOutletId(),10]);

        $query->setFetchMode(Db::FETCH_OBJ);

        foreach ($query->fetchAll() as $value) 
        {
            $result[] = (object) array(
                        "id_transaksi" => $value->id_transaksi,
                        "kode_booking" => $value->bill_info2,
                        "origin" => $value->bill_info79,
                        "destination" => $value->bill_info81,
                        "tanggal_keberangkatan" => $value->bill_info13,
                        "hari_keberangkatan" => "",
                        "jam_keberangkatan" => $value->bill_info80,
                        "tanggal_kedatangan" => "",
                        "hari_kedatangan" => "",
                        "jam_kedatangan" => $value->bill_info82,
                        "kode_kereta" => $value->bill_info83,
                        "nama_kereta" => $value->bill_info78,
                        "classes" => $value->bill_info54,
                        "penumpang" => Utility::getPassengerKereta($value),
                        "url_etiket" => "http://api.fastravel.co.id/app/generate_etiket?id_transaksi=" . $value->id_transaksi,
                        "url_struk" => "http://api.fastravel.co.id/app/generate_struk?id_transaksi=" . $value->id_transaksi,
            );
            
        }

        return $result;
    }
    
    public function initStatus($bookCode) 
    {
        $query = $this->db->query("SELECT * FROM transaksi WHERE bill_info2 = ? and response_code = '00' order by time_request DESC LIMIT 1",[$bookCode]);
        $query->setFetchMode(Db::FETCH_OBJ);
        $data = $query->fetch();
        
        if(!$data){
            return (object) array("Status" => "Kode booking tidak ditemukan","bookCode" => $bookCode);
        }
       
        return (object) array(
                    "bookCode"=> $data->bill_info2,
                    "Produk" => Utility::getProductName($this,$data->id_produk),
                    "Status" => (intval($data->jenis_transaksi)==0)?"Booking":"Payment"
        );
    }
    
    public function getDay($strdate){
        $timestamp = strtotime($strdate);
        return preg_replace(Utility::getPattern(),  Utility::getReplace(),date("l", $timestamp));
    }
    
    public function getFullDate($strdate,$time){
        $timestamp = strtotime($strdate);    
        return preg_replace(Utility::getPattern(),Utility::getReplace(),date("l", $timestamp) . "," . date("d", $timestamp)." ". date("F", $timestamp)." ".date("Y", $timestamp) );
    }
    
    
    
}
